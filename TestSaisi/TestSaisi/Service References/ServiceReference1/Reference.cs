//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace TestSaisi.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Commande", Namespace="http://schemas.datacontract.org/2004/07/CrudCommande")]
    public partial class Commande : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<System.DateTime> DateCommandeField;
        
        private int IdField;
        
        private string IdDonneurOrdreField;
        
        private System.Collections.ObjectModel.ObservableCollection<TestSaisi.ServiceReference1.LigneCommande> LigneCommandesField;
        
        private string StatutCommandeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateCommande {
            get {
                return this.DateCommandeField;
            }
            set {
                if ((this.DateCommandeField.Equals(value) != true)) {
                    this.DateCommandeField = value;
                    this.RaisePropertyChanged("DateCommande");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdDonneurOrdre {
            get {
                return this.IdDonneurOrdreField;
            }
            set {
                if ((object.ReferenceEquals(this.IdDonneurOrdreField, value) != true)) {
                    this.IdDonneurOrdreField = value;
                    this.RaisePropertyChanged("IdDonneurOrdre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<TestSaisi.ServiceReference1.LigneCommande> LigneCommandes {
            get {
                return this.LigneCommandesField;
            }
            set {
                if ((object.ReferenceEquals(this.LigneCommandesField, value) != true)) {
                    this.LigneCommandesField = value;
                    this.RaisePropertyChanged("LigneCommandes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatutCommande {
            get {
                return this.StatutCommandeField;
            }
            set {
                if ((object.ReferenceEquals(this.StatutCommandeField, value) != true)) {
                    this.StatutCommandeField = value;
                    this.RaisePropertyChanged("StatutCommande");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LigneCommande", Namespace="http://schemas.datacontract.org/2004/07/CrudCommande")]
    public partial class LigneCommande : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TestSaisi.ServiceReference1.Commande CommandeField;
        
        private System.Nullable<int> IdCommandeField;
        
        private int IdLigneCommandeField;
        
        private string IdProduitField;
        
        private System.Nullable<decimal> PrixHTField;
        
        private System.Nullable<int> QteField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestSaisi.ServiceReference1.Commande Commande {
            get {
                return this.CommandeField;
            }
            set {
                if ((object.ReferenceEquals(this.CommandeField, value) != true)) {
                    this.CommandeField = value;
                    this.RaisePropertyChanged("Commande");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IdCommande {
            get {
                return this.IdCommandeField;
            }
            set {
                if ((this.IdCommandeField.Equals(value) != true)) {
                    this.IdCommandeField = value;
                    this.RaisePropertyChanged("IdCommande");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdLigneCommande {
            get {
                return this.IdLigneCommandeField;
            }
            set {
                if ((this.IdLigneCommandeField.Equals(value) != true)) {
                    this.IdLigneCommandeField = value;
                    this.RaisePropertyChanged("IdLigneCommande");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdProduit {
            get {
                return this.IdProduitField;
            }
            set {
                if ((object.ReferenceEquals(this.IdProduitField, value) != true)) {
                    this.IdProduitField = value;
                    this.RaisePropertyChanged("IdProduit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> PrixHT {
            get {
                return this.PrixHTField;
            }
            set {
                if ((this.PrixHTField.Equals(value) != true)) {
                    this.PrixHTField = value;
                    this.RaisePropertyChanged("PrixHT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Qte {
            get {
                return this.QteField;
            }
            set {
                if ((this.QteField.Equals(value) != true)) {
                    this.QteField = value;
                    this.RaisePropertyChanged("Qte");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICommandeService")]
    public interface ICommandeService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommandeService/GetCommandeList", ReplyAction="http://tempuri.org/ICommandeService/GetCommandeListResponse")]
        System.IAsyncResult BeginGetCommandeList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<TestSaisi.ServiceReference1.Commande> EndGetCommandeList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommandeService/AddCommande", ReplyAction="http://tempuri.org/ICommandeService/AddCommandeResponse")]
        System.IAsyncResult BeginAddCommande(string StatutCommande, string IdDonneurOrdre, System.DateTime DateCommande, System.AsyncCallback callback, object asyncState);
        
        string EndAddCommande(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommandeService/ModifyCommande", ReplyAction="http://tempuri.org/ICommandeService/ModifyCommandeResponse")]
        System.IAsyncResult BeginModifyCommande(TestSaisi.ServiceReference1.Commande uneCommande, System.AsyncCallback callback, object asyncState);
        
        string EndModifyCommande(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommandeService/RemoveCommande", ReplyAction="http://tempuri.org/ICommandeService/RemoveCommandeResponse")]
        System.IAsyncResult BeginRemoveCommande(TestSaisi.ServiceReference1.Commande uneCommande, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveCommande(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICommandeService/InsertNumSerie", ReplyAction="http://tempuri.org/ICommandeService/InsertNumSerieResponse")]
        System.IAsyncResult BeginInsertNumSerie(string NumSeries, string IdEmplacement, System.AsyncCallback callback, object asyncState);
        
        int EndInsertNumSerie(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommandeServiceChannel : TestSaisi.ServiceReference1.ICommandeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCommandeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCommandeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TestSaisi.ServiceReference1.Commande> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<TestSaisi.ServiceReference1.Commande>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddCommandeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddCommandeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModifyCommandeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ModifyCommandeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveCommandeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveCommandeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertNumSerieCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertNumSerieCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommandeServiceClient : System.ServiceModel.ClientBase<TestSaisi.ServiceReference1.ICommandeService>, TestSaisi.ServiceReference1.ICommandeService {
        
        private BeginOperationDelegate onBeginGetCommandeListDelegate;
        
        private EndOperationDelegate onEndGetCommandeListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCommandeListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddCommandeDelegate;
        
        private EndOperationDelegate onEndAddCommandeDelegate;
        
        private System.Threading.SendOrPostCallback onAddCommandeCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifyCommandeDelegate;
        
        private EndOperationDelegate onEndModifyCommandeDelegate;
        
        private System.Threading.SendOrPostCallback onModifyCommandeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveCommandeDelegate;
        
        private EndOperationDelegate onEndRemoveCommandeDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveCommandeCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertNumSerieDelegate;
        
        private EndOperationDelegate onEndInsertNumSerieDelegate;
        
        private System.Threading.SendOrPostCallback onInsertNumSerieCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public CommandeServiceClient() {
        }
        
        public CommandeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommandeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommandeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommandeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetCommandeListCompletedEventArgs> GetCommandeListCompleted;
        
        public event System.EventHandler<AddCommandeCompletedEventArgs> AddCommandeCompleted;
        
        public event System.EventHandler<ModifyCommandeCompletedEventArgs> ModifyCommandeCompleted;
        
        public event System.EventHandler<RemoveCommandeCompletedEventArgs> RemoveCommandeCompleted;
        
        public event System.EventHandler<InsertNumSerieCompletedEventArgs> InsertNumSerieCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestSaisi.ServiceReference1.ICommandeService.BeginGetCommandeList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCommandeList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<TestSaisi.ServiceReference1.Commande> TestSaisi.ServiceReference1.ICommandeService.EndGetCommandeList(System.IAsyncResult result) {
            return base.Channel.EndGetCommandeList(result);
        }
        
        private System.IAsyncResult OnBeginGetCommandeList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TestSaisi.ServiceReference1.ICommandeService)(this)).BeginGetCommandeList(callback, asyncState);
        }
        
        private object[] OnEndGetCommandeList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<TestSaisi.ServiceReference1.Commande> retVal = ((TestSaisi.ServiceReference1.ICommandeService)(this)).EndGetCommandeList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCommandeListCompleted(object state) {
            if ((this.GetCommandeListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCommandeListCompleted(this, new GetCommandeListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCommandeListAsync() {
            this.GetCommandeListAsync(null);
        }
        
        public void GetCommandeListAsync(object userState) {
            if ((this.onBeginGetCommandeListDelegate == null)) {
                this.onBeginGetCommandeListDelegate = new BeginOperationDelegate(this.OnBeginGetCommandeList);
            }
            if ((this.onEndGetCommandeListDelegate == null)) {
                this.onEndGetCommandeListDelegate = new EndOperationDelegate(this.OnEndGetCommandeList);
            }
            if ((this.onGetCommandeListCompletedDelegate == null)) {
                this.onGetCommandeListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCommandeListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCommandeListDelegate, null, this.onEndGetCommandeListDelegate, this.onGetCommandeListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestSaisi.ServiceReference1.ICommandeService.BeginAddCommande(string StatutCommande, string IdDonneurOrdre, System.DateTime DateCommande, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddCommande(StatutCommande, IdDonneurOrdre, DateCommande, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string TestSaisi.ServiceReference1.ICommandeService.EndAddCommande(System.IAsyncResult result) {
            return base.Channel.EndAddCommande(result);
        }
        
        private System.IAsyncResult OnBeginAddCommande(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string StatutCommande = ((string)(inValues[0]));
            string IdDonneurOrdre = ((string)(inValues[1]));
            System.DateTime DateCommande = ((System.DateTime)(inValues[2]));
            return ((TestSaisi.ServiceReference1.ICommandeService)(this)).BeginAddCommande(StatutCommande, IdDonneurOrdre, DateCommande, callback, asyncState);
        }
        
        private object[] OnEndAddCommande(System.IAsyncResult result) {
            string retVal = ((TestSaisi.ServiceReference1.ICommandeService)(this)).EndAddCommande(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddCommandeCompleted(object state) {
            if ((this.AddCommandeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddCommandeCompleted(this, new AddCommandeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddCommandeAsync(string StatutCommande, string IdDonneurOrdre, System.DateTime DateCommande) {
            this.AddCommandeAsync(StatutCommande, IdDonneurOrdre, DateCommande, null);
        }
        
        public void AddCommandeAsync(string StatutCommande, string IdDonneurOrdre, System.DateTime DateCommande, object userState) {
            if ((this.onBeginAddCommandeDelegate == null)) {
                this.onBeginAddCommandeDelegate = new BeginOperationDelegate(this.OnBeginAddCommande);
            }
            if ((this.onEndAddCommandeDelegate == null)) {
                this.onEndAddCommandeDelegate = new EndOperationDelegate(this.OnEndAddCommande);
            }
            if ((this.onAddCommandeCompletedDelegate == null)) {
                this.onAddCommandeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddCommandeCompleted);
            }
            base.InvokeAsync(this.onBeginAddCommandeDelegate, new object[] {
                        StatutCommande,
                        IdDonneurOrdre,
                        DateCommande}, this.onEndAddCommandeDelegate, this.onAddCommandeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestSaisi.ServiceReference1.ICommandeService.BeginModifyCommande(TestSaisi.ServiceReference1.Commande uneCommande, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifyCommande(uneCommande, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string TestSaisi.ServiceReference1.ICommandeService.EndModifyCommande(System.IAsyncResult result) {
            return base.Channel.EndModifyCommande(result);
        }
        
        private System.IAsyncResult OnBeginModifyCommande(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TestSaisi.ServiceReference1.Commande uneCommande = ((TestSaisi.ServiceReference1.Commande)(inValues[0]));
            return ((TestSaisi.ServiceReference1.ICommandeService)(this)).BeginModifyCommande(uneCommande, callback, asyncState);
        }
        
        private object[] OnEndModifyCommande(System.IAsyncResult result) {
            string retVal = ((TestSaisi.ServiceReference1.ICommandeService)(this)).EndModifyCommande(result);
            return new object[] {
                    retVal};
        }
        
        private void OnModifyCommandeCompleted(object state) {
            if ((this.ModifyCommandeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifyCommandeCompleted(this, new ModifyCommandeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifyCommandeAsync(TestSaisi.ServiceReference1.Commande uneCommande) {
            this.ModifyCommandeAsync(uneCommande, null);
        }
        
        public void ModifyCommandeAsync(TestSaisi.ServiceReference1.Commande uneCommande, object userState) {
            if ((this.onBeginModifyCommandeDelegate == null)) {
                this.onBeginModifyCommandeDelegate = new BeginOperationDelegate(this.OnBeginModifyCommande);
            }
            if ((this.onEndModifyCommandeDelegate == null)) {
                this.onEndModifyCommandeDelegate = new EndOperationDelegate(this.OnEndModifyCommande);
            }
            if ((this.onModifyCommandeCompletedDelegate == null)) {
                this.onModifyCommandeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifyCommandeCompleted);
            }
            base.InvokeAsync(this.onBeginModifyCommandeDelegate, new object[] {
                        uneCommande}, this.onEndModifyCommandeDelegate, this.onModifyCommandeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestSaisi.ServiceReference1.ICommandeService.BeginRemoveCommande(TestSaisi.ServiceReference1.Commande uneCommande, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveCommande(uneCommande, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool TestSaisi.ServiceReference1.ICommandeService.EndRemoveCommande(System.IAsyncResult result) {
            return base.Channel.EndRemoveCommande(result);
        }
        
        private System.IAsyncResult OnBeginRemoveCommande(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TestSaisi.ServiceReference1.Commande uneCommande = ((TestSaisi.ServiceReference1.Commande)(inValues[0]));
            return ((TestSaisi.ServiceReference1.ICommandeService)(this)).BeginRemoveCommande(uneCommande, callback, asyncState);
        }
        
        private object[] OnEndRemoveCommande(System.IAsyncResult result) {
            bool retVal = ((TestSaisi.ServiceReference1.ICommandeService)(this)).EndRemoveCommande(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveCommandeCompleted(object state) {
            if ((this.RemoveCommandeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveCommandeCompleted(this, new RemoveCommandeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveCommandeAsync(TestSaisi.ServiceReference1.Commande uneCommande) {
            this.RemoveCommandeAsync(uneCommande, null);
        }
        
        public void RemoveCommandeAsync(TestSaisi.ServiceReference1.Commande uneCommande, object userState) {
            if ((this.onBeginRemoveCommandeDelegate == null)) {
                this.onBeginRemoveCommandeDelegate = new BeginOperationDelegate(this.OnBeginRemoveCommande);
            }
            if ((this.onEndRemoveCommandeDelegate == null)) {
                this.onEndRemoveCommandeDelegate = new EndOperationDelegate(this.OnEndRemoveCommande);
            }
            if ((this.onRemoveCommandeCompletedDelegate == null)) {
                this.onRemoveCommandeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveCommandeCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveCommandeDelegate, new object[] {
                        uneCommande}, this.onEndRemoveCommandeDelegate, this.onRemoveCommandeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TestSaisi.ServiceReference1.ICommandeService.BeginInsertNumSerie(string NumSeries, string IdEmplacement, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertNumSerie(NumSeries, IdEmplacement, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int TestSaisi.ServiceReference1.ICommandeService.EndInsertNumSerie(System.IAsyncResult result) {
            return base.Channel.EndInsertNumSerie(result);
        }
        
        private System.IAsyncResult OnBeginInsertNumSerie(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string NumSeries = ((string)(inValues[0]));
            string IdEmplacement = ((string)(inValues[1]));
            return ((TestSaisi.ServiceReference1.ICommandeService)(this)).BeginInsertNumSerie(NumSeries, IdEmplacement, callback, asyncState);
        }
        
        private object[] OnEndInsertNumSerie(System.IAsyncResult result) {
            int retVal = ((TestSaisi.ServiceReference1.ICommandeService)(this)).EndInsertNumSerie(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertNumSerieCompleted(object state) {
            if ((this.InsertNumSerieCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertNumSerieCompleted(this, new InsertNumSerieCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertNumSerieAsync(string NumSeries, string IdEmplacement) {
            this.InsertNumSerieAsync(NumSeries, IdEmplacement, null);
        }
        
        public void InsertNumSerieAsync(string NumSeries, string IdEmplacement, object userState) {
            if ((this.onBeginInsertNumSerieDelegate == null)) {
                this.onBeginInsertNumSerieDelegate = new BeginOperationDelegate(this.OnBeginInsertNumSerie);
            }
            if ((this.onEndInsertNumSerieDelegate == null)) {
                this.onEndInsertNumSerieDelegate = new EndOperationDelegate(this.OnEndInsertNumSerie);
            }
            if ((this.onInsertNumSerieCompletedDelegate == null)) {
                this.onInsertNumSerieCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertNumSerieCompleted);
            }
            base.InvokeAsync(this.onBeginInsertNumSerieDelegate, new object[] {
                        NumSeries,
                        IdEmplacement}, this.onEndInsertNumSerieDelegate, this.onInsertNumSerieCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TestSaisi.ServiceReference1.ICommandeService CreateChannel() {
            return new CommandeServiceClientChannel(this);
        }
        
        private class CommandeServiceClientChannel : ChannelBase<TestSaisi.ServiceReference1.ICommandeService>, TestSaisi.ServiceReference1.ICommandeService {
            
            public CommandeServiceClientChannel(System.ServiceModel.ClientBase<TestSaisi.ServiceReference1.ICommandeService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetCommandeList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCommandeList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<TestSaisi.ServiceReference1.Commande> EndGetCommandeList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<TestSaisi.ServiceReference1.Commande> _result = ((System.Collections.ObjectModel.ObservableCollection<TestSaisi.ServiceReference1.Commande>)(base.EndInvoke("GetCommandeList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddCommande(string StatutCommande, string IdDonneurOrdre, System.DateTime DateCommande, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = StatutCommande;
                _args[1] = IdDonneurOrdre;
                _args[2] = DateCommande;
                System.IAsyncResult _result = base.BeginInvoke("AddCommande", _args, callback, asyncState);
                return _result;
            }
            
            public string EndAddCommande(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("AddCommande", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginModifyCommande(TestSaisi.ServiceReference1.Commande uneCommande, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = uneCommande;
                System.IAsyncResult _result = base.BeginInvoke("ModifyCommande", _args, callback, asyncState);
                return _result;
            }
            
            public string EndModifyCommande(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ModifyCommande", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveCommande(TestSaisi.ServiceReference1.Commande uneCommande, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = uneCommande;
                System.IAsyncResult _result = base.BeginInvoke("RemoveCommande", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemoveCommande(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RemoveCommande", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertNumSerie(string NumSeries, string IdEmplacement, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = NumSeries;
                _args[1] = IdEmplacement;
                System.IAsyncResult _result = base.BeginInvoke("InsertNumSerie", _args, callback, asyncState);
                return _result;
            }
            
            public int EndInsertNumSerie(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("InsertNumSerie", _args, result)));
                return _result;
            }
        }
    }
}
